 #define USE_U8x8
 #define USE_Buttons
#define USE_BLE
//#define USE_OLED
//#define  USE_U8G2_for_arduino
//#define  USE_U8G2
volatile int teee  ;
#ifdef  USE_U8x8
#include <Arduino.h>
#include <U8x8lib.h>

// Please UNCOMMENT one of the contructor lines below
// U8x8 Contructor List 
// The complete list is available here: https://github.com/olikraus/u8g2/wiki/u8x8setupcpp
// Please update the pin numbers according to your setup. Use U8X8_PIN_NONE if the reset pin is not connected
//U8X8_NULL u8x8;  // null device, a 8x8 pixel display which does nothing

U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);
//U8X8_SSD1306_128X64_ALT0_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);        // same as the NONAME variant, but may solve the "every 2nd line skipped" problem
//U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(/* clock=*/ 2, /* data=*/ 0, /* reset=*/ U8X8_PIN_NONE);         // Digispark ATTiny85
//U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(/* clock=*/ SCL, /* data=*/ SDA, /* reset=*/ U8X8_PIN_NONE);   // OLEDs without Reset of the Display
//U8X8_SSD1306_128X64_VCOMH0_4W_HW_SPI u8x8(/* cs=*/ 10, /* dc=*/ 9, /* reset=*/ 8);    // same as the NONAME variant, but maximizes setContrast() range
//U8X8_SSD1306_128X64_ALT0_4W_HW_SPI u8x8(/* cs=*/ 10, /* dc=*/ 9, /* reset=*/ 8);    // same as the NONAME variant, but may solve the "every 2nd line skipped" problem

void setup_uu8x8(void)
    {
      /* U8g2 Project: SSD1306 Test Board */
      //pinMode(10, OUTPUT);
      //pinMode(9, OUTPUT);
      //digitalWrite(10, 0);
      //digitalWrite(9, 0);   

      /* U8g2 Project: KS0108 Test Board */
      //pinMode(16, OUTPUT);
      //digitalWrite(16, 0);  
    u8x8.begin();
    u8x8.setPowerSave(0);
    }
void loop_u8x8(void)
    {
   //String str = teee + "";
   char str[8];
   itoa(teee ,str, 10);
    

  //  Serial.println(teee);
  //  Serial.println(str);
    u8x8.setFont(u8x8_font_chroma48medium8_r);
    u8x8.drawString(0, 1, "YOYOY!");
    u8x8.drawString(0, 2, str);
    
    u8x8.refreshDisplay();    // only required for SSD1606/7  
    //delay(2000);
    }
#endif //  USE_U8x8


#ifdef USE_Buttons

#pragma region buttons

const int buttonPinA = 4;//left
const int buttonPinB = 7;//right

const int ledPinA = 2; //left
const int ledPinB = 13; //right
//const int ledPinC = 10; //red
int readingA;
int readingB;

int ledStateA = HIGH;
int ledStateB = HIGH;
int ledStateC = LOW;
int buttonStateA;
int buttonStateB;
int lastButtonStateA = LOW;
int lastButtonStateB = LOW;


int potPin_lr = A0;
int potPin_ud = A1;

unsigned long lastDebounceTimeA = 0;  // the last time the output pin was toggled
unsigned long debounceDelayA = 50;    // the debounce time; increase if the output flickers
unsigned long lastDebounceTimeB = 0;
unsigned long debounceDelayB = 50;

void ButtonALedA() {
    readingA = digitalRead(buttonPinA);
     // If the switch changed, due to noise or pressing:
    if (readingA != lastButtonStateA) {
        lastDebounceTimeA = millis(); // reset the debouncing timer
        }
    if ((millis() - lastDebounceTimeA) > debounceDelayA) {
  // whatever the reading is at, it's been there for longer than the debounce
  // delay, so take it as the actual current state:

  // if the button state has changed:
        if (readingA != buttonStateA) {
            buttonStateA = readingA;

            // only toggle the LED if the new button state is HIGH
            if (buttonStateA == HIGH) {
                ledStateA = !ledStateA;
                teee--;
                }
            }
        }
    digitalWrite(ledPinA, ledStateA);
        // save the reading. Next time through the loop, it'll be the lastButtonState:
    lastButtonStateA = readingA;
    }
void ButtonBLedB() {
    readingB = digitalRead(buttonPinB);
    if (readingB != lastButtonStateB) {
        lastDebounceTimeB = millis();
        }
    if ((millis() - lastDebounceTimeB) > debounceDelayB) {
        if (readingB != buttonStateB) {
            buttonStateB = readingB;
            if (buttonStateB == HIGH) {
                ledStateB = !ledStateB;
                teee++;
                }
            }
        }
    digitalWrite(ledPinB, ledStateB);
    lastButtonStateB = readingB;
    }

void TestLedAandB_on_red_on() {
    if (ledStateA == HIGH && ledStateB == HIGH) {
        Serial.println("both are on");
        }
    else
        Serial.println("Not Both yet");
    }
#pragma endregion
#endif // USE_Buttons

#ifdef  USE_U8G2_for_arduino
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <U8g2_for_Adafruit_GFX.h>
#include <u8g2_fonts.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
U8G2_FOR_ADAFRUIT_GFX u8g2_for_adafruit_gfx;

void loopU8g2() {
    display.clearDisplay();                               // clear the graphcis buffer  
    u8g2_for_adafruit_gfx.setFont(u8g2_font_helvR14_tf);  // select u8g2 font from here: https://github.com/olikraus/u8g2/wiki/fntlistall
    u8g2_for_adafruit_gfx.setFontMode(1);                 // use u8g2 transparent mode (this is default)
    u8g2_for_adafruit_gfx.setFontDirection(0);            // left to right (this is default)
    u8g2_for_adafruit_gfx.setForegroundColor(WHITE);      // apply Adafruit GFX color
    u8g2_for_adafruit_gfx.setCursor(0, 20);                // start writing at this position
    u8g2_for_adafruit_gfx.print("Hello World");
    u8g2_for_adafruit_gfx.setCursor(0, 40);                // start writing at this position
    u8g2_for_adafruit_gfx.print("Umlaut ÄÖÜ");            // UTF-8 string with german umlaut chars
    display.display();                                    // make everything visible
    //delay(2000);
    }

#endif



#ifdef USE_OLED

#pragma region OLED
#include <splash.h>
//#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
 /*
static const   uint8_t PROGMEM _01firstMono[] = {


    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000000,B10000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00111100,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B01111000,B01000000,B00000000,B01000000,B01111010,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B11111100,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111010,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B00111000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B11111100,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B01111000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01100000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000001,B10000000,B00000000,B00010000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };
 */

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'face01_24.bmp'
 */
#pragma once

#define FACE01_BMPWIDTH  128
#define FACE01_BMPHEIGHT 64

static const   uint8_t PROGMEM face01[] = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000000,B10000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00111100,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B01111000,B01000000,B00000000,B01000000,B01111010,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B11111100,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111010,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B01111110,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B00111000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000001,B11111110,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B11111100,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B01111000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01100000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000001,B10000000,B00000000,B00010000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };



#pragma once

#define FACE02_BMPWIDTH  128
#define FACE02_BMPHEIGHT 64
/*
static const   uint8_t PROGMEM face02[] = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000000,B10000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111100,B00000000,B00000000,B01000000,B00000000,B01111000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111110,B00000000,B00000000,B01000000,B00000000,B01110100,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111101,B00000000,B00000000,B01000000,B00000000,B01111100,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111111,B00000000,B00000000,B01000000,B00000000,B01111100,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111111,B00000000,B00000000,B01000000,B00000000,B01111100,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111111,B00000000,B00000000,B01000000,B00000000,B01110000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111110,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00111100,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01100000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000001,B10000000,B00000000,B00010000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };



#pragma once

#define FACE03_BMPWIDTH  128
#define FACE03_BMPHEIGHT 64

static const   uint8_t PROGMEM face03[] = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000000,B10000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00001111,B01000000,B00000000,B01000000,B00000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00011111,B11000000,B00000000,B01000000,B00000000,B00000000,B00111101,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00111111,B01000000,B00000000,B01000000,B00000000,B00000000,B00111111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00111111,B11000000,B00000000,B01000000,B00000000,B00000000,B00111111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00111111,B11000000,B00000000,B01000000,B00000000,B00000000,B00111111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00111111,B11000000,B00000000,B01000000,B00000000,B00000000,B00011101,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00011111,B11000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00001111,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01100000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000001,B10000000,B00000000,B00010000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };



#pragma once

#define FACE04_BMPWIDTH  128
#define FACE04_BMPHEIGHT 64

static const   uint8_t PROGMEM   face04[] = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00111101,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00111111,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00011111,B10100000,B10000000,B00000000,B01000000,B00111111,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00011111,B11100000,B01000000,B00000000,B01000000,B00111111,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00011111,B11100000,B01000000,B00000000,B01000000,B00011100,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00011111,B11100000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00001111,B11000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000111,B10000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01100000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00000000,B00000001,B10000000,B00000000,B00010000,B00000000,B00000000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };



#pragma once

#define FACE05_BMPWIDTH  128
#define FACE05_BMPHEIGHT 64

static const   uint8_t PROGMEM   face05[] = {
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001111,B11111111,B11111111,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00110000,B00000000,B00000000,B00000110,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00001111,B11111111,B11111111,B00000000,B00000000,B01000000,B00000000,B00000000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00010000,B00000000,B00000000,B10000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00000111,B10000000,B01000000,B00000000,B01000000,B00000000,B00000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00001111,B11000000,B01000000,B00000000,B01000000,B00000011,B11000000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00011111,B10100000,B01000000,B00000000,B01000000,B00000111,B10100000,B00000001,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00100000,B00011111,B11100000,B01000000,B00000000,B01100000,B00000111,B11100000,B00000010,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00011000,B00011111,B11100001,B10000000,B00000000,B00010000,B00000111,B11100000,B00001100,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000111,B11111111,B11111110,B00000000,B00000000,B00001111,B11111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111111,B11111000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B11100000,B00001110,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00011111,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00001110,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00111000,B00000000,B00011111,B11000000,B00000000,
  B00000000,B00000000,B00000000,B11111000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000001,B11100000,B00000000,B00011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B10000000,B00000000,B01111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000111,B11111111,B00000000,B00000000,B00000000,B00000000,B00000000,B00011110,B10000000,B00000000,B01011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000100,B00000001,B11111111,B11111111,B11111111,B11111111,B11111111,B11100000,B10000000,B00000001,B11011111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000110,B00000000,B00010000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00001111,B00001111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B00111000,B00111111,B11100000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000000,B11000001,B11000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000011,B11111100,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B00000111,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000011,B11111111,B11110000,B00000000,B01000000,B00000000,B00000000,B10001110,B00011000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00001100,B00000000,B00100000,B00011111,B11111111,B11111111,B11111111,B11111111,B11111000,B01110000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00111100,B00000000,B00100000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B11100000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10000001,B10000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000010,B00000000,B00110000,B00000000,B00000000,B01000000,B00000000,B00000000,B10001110,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000001,B11111111,B00010000,B00000000,B00000000,B01000000,B00000000,B00000001,B11111000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000001,B11111110,B00000000,B00000000,B01000000,B00000000,B00011111,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000011,B11111111,B00000000,B01000000,B00000001,B11100000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B10000000,B01000000,B00001111,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111111,B11111111,B11110000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
  B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000
    };
*/

static const   uint8_t PROGMEM logo_bmp[] =
    { B00000000, B11000000,
      B00000001, B11000000,
      B00000001, B11000000,
      B00000011, B11100000,
      B11110011, B11100000,
      B11111110, B11111000,
      B01111110, B11111111,
      B00110011, B10011111,
      B00011111, B11111100,
      B00001101, B01110000,
      B00011011, B10100000,
      B00111111, B11100000,
      B00111111, B11110000,
      B01111100, B11110000,
      B01110000, B01110000,
      B00000000, B00110000 };

#pragma endregion

void loopOled() {
    display.clearDisplay();

  //  display.drawBitmap(  0,  0, splash2_data, splash2_width, splash2_height, 1);
    display.drawBitmap(0, 0, face01, 128, 64, 1);
    display.display();
    }


#pragma region testdraws
void testdrawline() {
    int16_t i;

    display.clearDisplay(); // Clear display buffer

    for (i = 0; i < display.width(); i += 4) {
        display.drawLine(0, 0, i, display.height() - 1, SSD1306_WHITE);
        display.display(); // Update screen with each newly-drawn line
        delay(1);
        }
    for (i = 0; i < display.height(); i += 4) {
        display.drawLine(0, 0, display.width() - 1, i, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    delay(250);

    display.clearDisplay();

    for (i = 0; i < display.width(); i += 4) {
        display.drawLine(0, display.height() - 1, i, 0, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    for (i = display.height() - 1; i >= 0; i -= 4) {
        display.drawLine(0, display.height() - 1, display.width() - 1, i, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    delay(250);

    display.clearDisplay();

    for (i = display.width() - 1; i >= 0; i -= 4) {
        display.drawLine(display.width() - 1, display.height() - 1, i, 0, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    for (i = display.height() - 1; i >= 0; i -= 4) {
        display.drawLine(display.width() - 1, display.height() - 1, 0, i, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    delay(250);

    display.clearDisplay();

    for (i = 0; i < display.height(); i += 4) {
        display.drawLine(display.width() - 1, 0, 0, i, SSD1306_WHITE);
        display.display();
        delay(1);
        }
    for (i = 0; i < display.width(); i += 4) {
        display.drawLine(display.width() - 1, 0, i, display.height() - 1, SSD1306_WHITE);
        display.display();
        delay(1);
        }

    delay(2000); // Pause for 2 seconds
    }

void testdrawrect(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < display.height() / 2; i += 2) {
        display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, SSD1306_WHITE);
        display.display(); // Update screen with each newly-drawn rectangle
        delay(1);
        }

    delay(2000);
    }

void testfillrect(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < display.height() / 2; i += 3) {
      // The INVERSE color is used so rectangles alternate white/black
        display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, SSD1306_INVERSE);
        display.display(); // Update screen with each newly-drawn rectangle
        delay(1);
        }

    delay(2000);
    }

void testdrawcircle(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < max(display.width(), display.height()) / 2; i += 2) {
        display.drawCircle(display.width() / 2, display.height() / 2, i, SSD1306_WHITE);
        display.display();
        delay(1);
        }

    delay(2000);
    }

void testfillcircle(void) {
    display.clearDisplay();

    for (int16_t i = max(display.width(), display.height()) / 2; i > 0; i -= 3) {
      // The INVERSE color is used so circles alternate white/black
        display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
        display.display(); // Update screen with each newly-drawn circle
        delay(1);
        }

    delay(2000);
    }

void testdrawroundrect(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
        display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i,
                              display.height() / 4, SSD1306_WHITE);
        display.display();
        delay(1);
        }

    delay(2000);
    }

void testfillroundrect(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
      // The INVERSE color is used so round-rects alternate white/black
        display.fillRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i,
                              display.height() / 4, SSD1306_INVERSE);
        display.display();
        delay(1);
        }

    delay(2000);
    }

void testdrawtriangle(void) {
    display.clearDisplay();

    for (int16_t i = 0; i < max(display.width(), display.height()) / 2; i += 5) {
        display.drawTriangle(
            display.width() / 2, display.height() / 2 - i,
            display.width() / 2 - i, display.height() / 2 + i,
            display.width() / 2 + i, display.height() / 2 + i, SSD1306_WHITE);
        display.display();
        delay(1);
        }

    delay(2000);
    }

void testfilltriangle(void) {
    display.clearDisplay();

    for (int16_t i = max(display.width(), display.height()) / 2; i > 0; i -= 5) {
      // The INVERSE color is used so triangles alternate white/black
        display.fillTriangle(
            display.width() / 2, display.height() / 2 - i,
            display.width() / 2 - i, display.height() / 2 + i,
            display.width() / 2 + i, display.height() / 2 + i, SSD1306_INVERSE);
        display.display();
        delay(1);
        }

    delay(2000);
    }

void testdrawchar(void) {
    display.clearDisplay();

    display.setTextSize(1);      // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE); // Draw white text
    display.setCursor(0, 0);     // Start at top-left corner
    display.cp437(true);         // Use full 256 char 'Code Page 437' font

    // Not all the characters will fit on the display. This is normal.
    // Library will draw what it can and the rest will be clipped.
    for (int16_t i = 0; i < 256; i++) {
        if (i == '\n') display.write(' ');
        else          display.write(i);
        }

    display.display();
    delay(2000);
    }

void testdrawstyles(void) {
    display.clearDisplay();

    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(SSD1306_WHITE);        // Draw white text
    display.setCursor(0, 0);             // Start at top-left corner
    display.println(F("Hello, world!"));

    display.setCursor(0, 30);             // Start at top-left corner
    display.println(F("Hello, world!"));

    display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
    display.println(3.141592);

    display.setTextSize(2);             // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.print(F("0x")); display.println(0xDEADBEEF, HEX);

    display.display();
    delay(2000);
    }

void testscrolltext(void) {
    display.clearDisplay();

    display.setTextSize(2); // Draw 2X-scale text
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 0);
    display.println(F("scroll"));
    display.display();      // Show initial text
    delay(100);

    // Scroll in various directions, pausing in-between:
    display.startscrollright(0x00, 0x0F);
    delay(2000);
    display.stopscroll();
    delay(1000);
    display.startscrollleft(0x00, 0x0F);
    delay(2000);
    display.stopscroll();
    delay(1000);
    display.startscrolldiagright(0x00, 0x07);
    delay(2000);
    display.startscrolldiagleft(0x00, 0x07);
    delay(2000);
    display.stopscroll();
    delay(1000);
    }

void testdrawbitmap(void) {
    display.clearDisplay();
    display.drawBitmap(0, 0, face01, 128, 64, 1);
// display.drawBitmap((display.width() - LOGO_WIDTH) / 2,(display.height() - LOGO_HEIGHT) / 2,logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display();
    delay(1000);
    }

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t* bitmap, uint8_t w, uint8_t h) {
    int8_t f, icons[NUMFLAKES][3];

    // Initialize 'snowflake' positions
    for (f = 0; f < NUMFLAKES; f++) {
        icons[f][XPOS] = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS] = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
        Serial.print(F("x: "));
        Serial.print(icons[f][XPOS], DEC);
        Serial.print(F(" y: "));
        Serial.print(icons[f][YPOS], DEC);
        Serial.print(F(" dy: "));
        Serial.println(icons[f][DELTAY], DEC);
        }

    for (;;) { // Loop forever...
        display.clearDisplay(); // Clear the display buffer

        // Draw each snowflake:
        for (f = 0; f < NUMFLAKES; f++) {
            display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
            }

        display.display(); // Show the display buffer on the screen
        delay(200);        // Pause for 1/10 second

        // Then update coordinates of each flake...
        for (f = 0; f < NUMFLAKES; f++) {
            icons[f][YPOS] += icons[f][DELTAY];
            // If snowflake is off the bottom of the screen...
            if (icons[f][YPOS] >= display.height()) {
              // Reinitialize to a random position, just off the top
                icons[f][XPOS] = random(1 - LOGO_WIDTH, display.width());
                icons[f][YPOS] = -LOGO_HEIGHT;
                icons[f][DELTAY] = random(1, 6);
                }
            }
        }
    }


#pragma endregion

#endif // USE_OLED

#ifdef USE_BLE


#pragma region BLA_MASTER serial stuff
#include <AltSoftSerial.h>

//SoftwareSerial mySerial(0, 1); // RX, TX
AltSoftSerial mySerial;
char c = ' ';
boolean NL = true;
#pragma endregion


void loopAltSoft()
    {
     // Read from the Bluetooth module and send to the Arduino Serial Monitor
    if (mySerial.available())
        {
        c = mySerial.read();
        Serial.write(c);
        }


        // Read from the Serial Monitor and send to the Bluetooth module
    if (Serial.available())
        {
        c = Serial.read();

        // do not send line end characters to the HM-10
        if (c != 10 & c != 13)
            {
            mySerial.write(c);
            }

            // Echo the user input to the main window. 
            // If there is a new line print the ">" character.
        if (NL) { Serial.print("\r\n>");  NL = false; }
        Serial.write(c);
        if (c == 10) { NL = true; }
        }
    }

#endif // USE_BLE

#ifdef  USE_U8G2
#include <u8g2_fonts.h>
#include <U8x8lib.h>
#include <U8g2lib.h>
#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
U8X8_SSD1306_128X64_NONAME_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE);

#endif //USE_U8G2

void pre(void)
    {
    u8x8.setFont(u8x8_font_chroma48medium8_r);
    u8x8.clear();

    u8x8.inverse();
    u8x8.print(" U8x8 Library ");
    u8x8.setFont(u8x8_font_chroma48medium8_r);
    u8x8.noInverse();
    u8x8.setCursor(0, 1);
    }

void draw_bar(uint8_t c, uint8_t is_inverse)
    {
    uint8_t r;
    u8x8.setInverseFont(is_inverse);
    for (r = 0; r < u8x8.getRows(); r++)
        {
        u8x8.setCursor(c, r);
        u8x8.print(" ");
        }
    }

void draw_ascii_row(uint8_t r, int start)
    {
    int a;
    uint8_t c;
    for (c = 0; c < u8x8.getCols(); c++)
        {
        u8x8.setCursor(c, r);
        a = start + c;
        if (a <= 255)
            u8x8.write(a);
        }
    }

void loop_U8G2(void)
    {
    int i;
    uint8_t c, r, d;
    pre();
    u8x8.print("github.com/");
    u8x8.setCursor(0, 2);
    u8x8.print("olikraus/u8g2");
    delay(2000);
    u8x8.setCursor(0, 3);
    u8x8.print("Tile size:");
    u8x8.print((int)u8x8.getCols());
    u8x8.print("x");
    u8x8.print((int)u8x8.getRows());

    delay(2000);

    pre();
    for (i = 19; i > 0; i--)
        {
        u8x8.setCursor(3, 2);
        u8x8.print(i);
        u8x8.print("  ");
        delay(150);
        }

    draw_bar(0, 1);
    for (c = 1; c < u8x8.getCols(); c++)
        {
        draw_bar(c, 1);
        draw_bar(c - 1, 0);
        delay(50);
        }
    draw_bar(u8x8.getCols() - 1, 0);

    pre();
    u8x8.setFont(u8x8_font_amstrad_cpc_extended_f);
    for (d = 0; d < 8; d++)
        {
        for (r = 1; r < u8x8.getRows(); r++)
            {
            draw_ascii_row(r, (r - 1 + d) * u8x8.getCols() + 32);
            }
        delay(400);
        }

    draw_bar(u8x8.getCols() - 1, 1);
    for (c = u8x8.getCols() - 1; c > 0; c--)
        {
        draw_bar(c - 1, 1);
        draw_bar(c, 0);
        delay(50);
        }
    draw_bar(0, 0);

    pre();
    u8x8.drawString(0, 2, "Small");
    u8x8.draw2x2String(0, 5, "Scale Up");
    delay(3000);

    pre();
    u8x8.drawString(0, 2, "Small");
    u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
    u8x8.drawString(0, 5, "2x2 Font");
    delay(3000);

    pre();
    u8x8.drawString(0, 1, "3x6 Font");
    u8x8.setFont(u8x8_font_inb33_3x6_n);
    for (i = 0; i < 100; i++)
        {
        u8x8.setCursor(0, 2);
        u8x8.print(i);			// Arduino Print function
        delay(10);
        }
    for (i = 0; i < 100; i++)
        {
        u8x8.drawString(0, 2, u8x8_u16toa(i, 5));	// U8g2 Build-In functions
        delay(10);
        }

    pre();
    u8x8.drawString(0, 2, "Weather");
    u8x8.setFont(u8x8_font_open_iconic_weather_4x4);
    for (c = 0; c < 6; c++)
        {
        u8x8.drawGlyph(0, 4, '@' + c);
        delay(300);
        }


    pre();
    u8x8.print("print \\n\n");
    delay(500);
    u8x8.println("println");
    delay(500);
    u8x8.println("done");
    delay(1500);

    pre();
    u8x8.fillDisplay();
    for (r = 0; r < u8x8.getRows(); r++)
        {
        u8x8.clearLine(r);
        delay(100);
        }
    delay(1000);

    }
#endif

 

   

void setup() {
    Serial.begin(9600);
    teee = 100;
#ifdef USE_Buttons
    pinMode(buttonPinA, INPUT);
    pinMode(buttonPinB, INPUT);
    pinMode(ledPinA, OUTPUT);
    pinMode(ledPinB, OUTPUT);
    //pinMode(ledPinC, OUTPUT);
    pinMode(potPin_lr, INPUT);
    pinMode(potPin_ud, INPUT);
#endif // USE_Buttons

#ifdef USE_BLE
    mySerial.begin(9600);
    Serial.println("BTserial started at 9600");
#endif // USE_BLE

#ifdef USE_OLED

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;); // Don't proceed, loop forever
        }

        // Show initial display buffer contents on the screen --
        // the library initializes this with an Adafruit splash screen.
    display.display();
    delay(15); // Pause for 2 seconds

    // Clear the buffer
    display.clearDisplay();

#endif // USEOLED

#ifdef  USE_U8G2_for_arduino
    display.begin(SSD1306_SWITCHCAPVCC);
    u8g2_for_adafruit_gfx.begin(display);                 // connect u8g2 procedures to Adafruit GFX
#endif //use_u8g2_for_Arduiuno

#ifdef USE_U8G2
    /* U8g2 Project: KS0108 Test Board */
  //pinMode(16, OUTPUT);
  //digitalWrite(16, 0);	

  /* U8g2 Project: Pax Instruments Shield: Enable Backlight */
  //pinMode(6, OUTPUT);
  //digitalWrite(6, 0);	

    u8x8.begin();
    //u8x8.setFlipMode(1);
#endif


#ifdef  USE_U8x8
    setup_uu8x8();
#endif //  USE_U8x8



    // Draw a single pixel in white
   // display.drawPixel(10, 10, SSD1306_WHITE);

    // Show the display buffer on the screen. You MUST call display() after
    // drawing commands to make them visible on screen!
  //  display.display();
  //  delay(2000);
    // display.display() is NOT necessary after every single drawing command,
    // unless that's what you want...rather, you can batch up a bunch of
    // drawing operations and then update the screen all at once by calling
    // display.display(). These examples demonstrate both approaches...
  /*
    testdrawline();      // Draw many lines

    testdrawrect();      // Draw rectangles (outlines)

    testfillrect();      // Draw rectangles (filled)

    testdrawcircle();    // Draw circles (outlines)

    testfillcircle();    // Draw circles (filled)

    testdrawroundrect(); // Draw rounded rectangles (outlines)

    testfillroundrect(); // Draw rounded rectangles (filled)

    testdrawtriangle();  // Draw triangles (outlines)

    testfilltriangle();  // Draw triangles (filled)

    testdrawchar();      // Draw characters of the default font

    testdrawstyles();    // Draw 'stylized' characters

    testscrolltext();    // Draw scrolling text

    testdrawbitmap();    // Draw a small bitmap image

    // Invert and restore display, pausing in-between
    display.invertDisplay(true);
    delay(1000);
    display.invertDisplay(false);
    delay(1000);

    testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
    */
   // delay(1000);

    }


void loop() {
   

#ifdef USE_Buttons
    ButtonALedA();
    ButtonBLedB();
#endif // USE_Buttons

#ifdef USE_OLED
    loopOled();
#endif // USE_OLED


#ifdef USE_U8G2_for_arduino
    loopU8g2();
#endif

    
    #ifdef USE_U8G2
        loop_U8G2();
    #endif
        
        if (millis() % 1000 == 0) {
        #ifdef  USE_U8x8
            loop_u8x8();
        #endif //  USE_U8x8
            }
        else
            {
        #ifdef USE_BLE

            loopAltSoft();
        #endif // USE_BLE

            }
    }
